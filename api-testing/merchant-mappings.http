@baseUrl = http://localhost:3000
@categoryId = 00000000-0000-0000-0000-000000000000

### Get merchant mappings - no parameters (default limit: 20)
GET {{baseUrl}}/api/merchant-mappings
Accept: application/json

### Get merchant mappings - with custom limit
GET {{baseUrl}}/api/merchant-mappings?limit=10
Accept: application/json

### Get merchant mappings - with search filter
GET {{baseUrl}}/api/merchant-mappings?search=starbucks
Accept: application/json

### Get merchant mappings - with cursor for pagination
# Note: Replace the cursor value with an actual cursor from a previous response
GET {{baseUrl}}/api/merchant-mappings?cursor=starbucks|uuid-goes-here
Accept: application/json

### Get merchant mappings - combined parameters (search + limit)
GET {{baseUrl}}/api/merchant-mappings?search=coffee&limit=5
Accept: application/json

### Get merchant mappings - combined parameters (search + limit + cursor)
# Note: Replace the cursor value with an actual cursor from a previous response
GET {{baseUrl}}/api/merchant-mappings?search=cafe&limit=15&cursor=cafemoka|uuid-goes-here
Accept: application/json

### Get merchant mappings - test maximum limit
GET {{baseUrl}}/api/merchant-mappings?limit=100
Accept: application/json

### Get merchant mappings - test limit validation (should fail - exceeds max)
GET {{baseUrl}}/api/merchant-mappings?limit=150
Accept: application/json

### Get merchant mappings - test limit validation (should fail - negative)
GET {{baseUrl}}/api/merchant-mappings?limit=-1
Accept: application/json

### Get merchant mappings - test empty search (should fail validation)
GET {{baseUrl}}/api/merchant-mappings?search=
Accept: application/json

### ========================================
### POST /api/merchant-mappings - Upsert Merchant Mapping
### ========================================

### Create new merchant mapping (should return 201 Created)
POST {{baseUrl}}/api/merchant-mappings
Content-Type: application/json
Accept: application/json

{
  "merchantName": "Starbucks Coffee",
  "categoryId": "{{categoryId}}"
}

### Update existing merchant mapping (should return 200 OK)
# Note: Run the create test above first, then run this to update the same merchant
POST {{baseUrl}}/api/merchant-mappings
Content-Type: application/json
Accept: application/json

{
  "merchantName": "Starbucks Coffee",
  "categoryId": "{{categoryId}}"
}

### Create merchant mapping with special characters (should normalize and create)
POST {{baseUrl}}/api/merchant-mappings
Content-Type: application/json
Accept: application/json

{
  "merchantName": "McDonald's Restaurant & Cafe",
  "categoryId": "{{categoryId}}"
}

### Create merchant mapping with different casing (should normalize to same key)
# Note: This should update the mapping from "McDonald's Restaurant & Cafe" above
POST {{baseUrl}}/api/merchant-mappings
Content-Type: application/json
Accept: application/json

{
  "merchantName": "MCDONALD'S RESTAURANT & CAFE",
  "categoryId": "{{categoryId}}"
}

### Test invalid UUID for categoryId (should fail with 400)
POST {{baseUrl}}/api/merchant-mappings
Content-Type: application/json
Accept: application/json

{
  "merchantName": "Test Merchant",
  "categoryId": "not-a-valid-uuid"
}

### Test missing merchantName field (should fail with 400)
POST {{baseUrl}}/api/merchant-mappings
Content-Type: application/json
Accept: application/json

{
  "categoryId": "{{categoryId}}"
}

### Test missing categoryId field (should fail with 400)
POST {{baseUrl}}/api/merchant-mappings
Content-Type: application/json
Accept: application/json

{
  "merchantName": "Test Merchant"
}

### Test empty merchantName (should fail with 400)
POST {{baseUrl}}/api/merchant-mappings
Content-Type: application/json
Accept: application/json

{
  "merchantName": "",
  "categoryId": "{{categoryId}}"
}

### Test non-existent categoryId (should fail with 400)
POST {{baseUrl}}/api/merchant-mappings
Content-Type: application/json
Accept: application/json

{
  "merchantName": "Test Merchant",
  "categoryId": "12345678-1234-1234-1234-123456789012"
}

### Test invalid JSON (should fail with 400)
POST {{baseUrl}}/api/merchant-mappings
Content-Type: application/json
Accept: application/json

{
  "merchantName": "Test Merchant",
  "categoryId": "{{categoryId}}",
}

### ========================================
### PATCH /api/merchant-mappings/{id} - Update Merchant Mapping Category
### ========================================

### Update merchant mapping category (success path - should return 200 OK)
# Note: First create a merchant mapping using the POST tests above, then replace {id} with the actual ID
PATCH {{baseUrl}}/api/merchant-mappings/{id}
Content-Type: application/json
Accept: application/json

{
  "categoryId": "{{categoryId}}"
}

### ========================================
### DELETE /api/merchant-mappings/{id} - Delete Merchant Mapping
### ========================================

### Delete merchant mapping (success path - should return 200 OK)
# Note: First create a merchant mapping using the POST tests above, then replace {id} with the actual ID
DELETE {{baseUrl}}/api/merchant-mappings/{id}
Accept: application/json

### Delete merchant mapping - attempt to delete non-existent mapping (should return 404 Not Found)
DELETE {{baseUrl}}/api/merchant-mappings/12345678-1234-1234-1234-123456789012
Accept: application/json

### Delete merchant mapping - invalid UUID format (should return 400 Bad Request)
DELETE {{baseUrl}}/api/merchant-mappings/invalid-uuid
Accept: application/json

### Delete merchant mapping - no authentication (should return 401 Unauthorized)
# Note: This test requires removing authentication headers/cookies if they exist
DELETE {{baseUrl}}/api/merchant-mappings/12345678-1234-1234-1234-123456789012
Accept: application/json

